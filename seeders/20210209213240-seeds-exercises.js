module.exports = {
  up: async (queryInterface) => {
    await queryInterface.bulkInsert('exercises', [
      {
        topicId: 1,
        name: 'Exercício 1',
        wording: 'Texto do enunciado da questão',
        example: 'Quando enviado 10 retorna 10',
        defaultCode: 'function retornar(param) {}',
        test: 'describe("retornar", () => { it("Retorna 5 quando passado 5", () => { const r = retornar(5); expect(r).equal(5); }); it("Retorna 3 quando passado 3", () => { const r = retornar(3); expect(r).equal(3); }); })',
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        topicId: 1,
        name: 'Exercício 2',
        wording: 'Texto do enunciado da questão',
        example: 'Quando enviado 10 e 5 retorna 15',
        defaultCode: 'function soma(param1, param2) {}',
        test: 'describe("soma", () => { it("Retorna 9 quando passado 5 e 4", () => { const r = soma(5, 4); expect(r).equal(9); }); it("Retorna 3 quando passado 1 e 2", () => { const r = soma(1, 2); expect(r).equal(3); }); });',
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        topicId: 2,
        name: 'Exercício 3',
        wording: 'Texto do enunciado da questão',
        example: 'Quando enviado 10 e 5 retorna 5',
        defaultCode: 'function subtrair(param1, param2) {}',
        test: 'describe("subtrair", () => { it("Retorna 1 quando passado 5 e 4", () => { const r = subtrair(5, 4); expect(r).equal(1); }); it("Retorna 3 quando passado 6 e 3", () => { const r = subtrair(6, 3); expect(r).equal(3); }); });',
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        topicId: 2,
        name: 'Exercício 4',
        wording: 'Texto do enunciado da questão',
        example: 'Quando enviado 10 retorna 10',
        defaultCode: 'function retornar(param) {}',
        test: 'describe("retornar", () => { it("Retorna 5 quando passado 5", () => { const r = retornar(5); expect(r).equal(5); }); it("Retorna 3 quando passado 3", () => { const r = retornar(3); expect(r).equal(3); }); })',
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        topicId: 3,
        name: 'Exercício 5',
        wording: 'Texto do enunciado da questão',
        example: 'Quando enviado 10 e 5 retorna 15',
        defaultCode: 'function soma(param1, param2) {}',
        test: 'describe("soma", () => { it("Retorna 9 quando passado 5 e 4", () => { const r = soma(5, 4); expect(r).equal(9); }); it("Retorna 3 quando passado 1 e 2", () => { const r = soma(1, 2); expect(r).equal(3); }); });',
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        topicId: 3,
        name: 'Exercício 6',
        wording: 'Texto do enunciado da questão',
        example: 'Quando enviado 10 e 5 retorna 5',
        defaultCode: 'function subtrair(param1, param2) {}',
        test: 'describe("subtrair", () => { it("Retorna 1 quando passado 5 e 4", () => { const r = subtrair(5, 4); expect(r).equal(1); }); it("Retorna 3 quando passado 6 e 3", () => { const r = subtrair(6, 3); expect(r).equal(3); }); });',
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        topicId: 4,
        name: 'Exercício 7',
        wording: 'Texto do enunciado da questão',
        example: 'Quando enviado 10 retorna 10',
        defaultCode: 'function retornar(param) {}',
        test: 'describe("retornar", () => { it("Retorna 5 quando passado 5", () => { const r = retornar(5); expect(r).equal(5); }); it("Retorna 3 quando passado 3", () => { const r = retornar(3); expect(r).equal(3); }); })',
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        topicId: 4,
        name: 'Exercício 8',
        wording: 'Texto do enunciado da questão',
        example: 'Quando enviado 10 e 5 retorna 15',
        defaultCode: 'function soma(param1, param2) {}',
        test: 'describe("soma", () => { it("Retorna 9 quando passado 5 e 4", () => { const r = soma(5, 4); expect(r).equal(9); }); it("Retorna 3 quando passado 1 e 2", () => { const r = soma(1, 2); expect(r).equal(3); }); });',
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        topicId: 5,
        name: 'Exercício 9',
        wording: 'Texto do enunciado da questão',
        example: 'Quando enviado 10 e 5 retorna 5',
        defaultCode: 'function subtrair(param1, param2) {}',
        test: 'describe("subtrair", () => { it("Retorna 1 quando passado 5 e 4", () => { const r = subtrair(5, 4); expect(r).equal(1); }); it("Retorna 3 quando passado 6 e 3", () => { const r = subtrair(6, 3); expect(r).equal(3); }); });',
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        topicId: 5,
        name: 'Exercício 10',
        wording: 'Texto do enunciado da questão',
        example: 'Quando enviado 10 retorna 10',
        defaultCode: 'function retornar(param) {}',
        test: 'describe("retornar", () => { it("Retorna 5 quando passado 5", () => { const r = retornar(5); expect(r).equal(5); }); it("Retorna 3 quando passado 3", () => { const r = retornar(3); expect(r).equal(3); }); })',
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        topicId: 6,
        name: 'Exercício 11',
        wording: 'Texto do enunciado da questão',
        example: 'Quando enviado 10 e 5 retorna 15',
        defaultCode: 'function soma(param1, param2) {}',
        test: 'describe("soma", () => { it("Retorna 9 quando passado 5 e 4", () => { const r = soma(5, 4); expect(r).equal(9); }); it("Retorna 3 quando passado 1 e 2", () => { const r = soma(1, 2); expect(r).equal(3); }); });',
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        topicId: 6,
        name: 'Exercício 12',
        wording: 'Texto do enunciado da questão',
        example: 'Quando enviado 10 e 5 retorna 5',
        defaultCode: 'function subtrair(param1, param2) {}',
        test: 'describe("subtrair", () => { it("Retorna 1 quando passado 5 e 4", () => { const r = subtrair(5, 4); expect(r).equal(1); }); it("Retorna 3 quando passado 6 e 3", () => { const r = subtrair(6, 3); expect(r).equal(3); }); });',
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        topicId: 7,
        name: 'Exercício 13',
        wording: 'Texto do enunciado da questão',
        example: 'Quando enviado 10 retorna 10',
        defaultCode: 'function retornar(param) {}',
        test: 'describe("retornar", () => { it("Retorna 5 quando passado 5", () => { const r = retornar(5); expect(r).equal(5); }); it("Retorna 3 quando passado 3", () => { const r = retornar(3); expect(r).equal(3); }); })',
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        topicId: 7,
        name: 'Exercício 14',
        wording: 'Texto do enunciado da questão',
        example: 'Quando enviado 10 e 5 retorna 15',
        defaultCode: 'function soma(param1, param2) {}',
        test: 'describe("soma", () => { it("Retorna 9 quando passado 5 e 4", () => { const r = soma(5, 4); expect(r).equal(9); }); it("Retorna 3 quando passado 1 e 2", () => { const r = soma(1, 2); expect(r).equal(3); }); });',
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        topicId: 8,
        name: 'Exercício 15',
        wording: 'Texto do enunciado da questão',
        example: 'Quando enviado 10 e 5 retorna 5',
        defaultCode: 'function subtrair(param1, param2) {}',
        test: 'describe("subtrair", () => { it("Retorna 1 quando passado 5 e 4", () => { const r = subtrair(5, 4); expect(r).equal(1); }); it("Retorna 3 quando passado 6 e 3", () => { const r = subtrair(6, 3); expect(r).equal(3); }); });',
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        topicId: 8,
        name: 'Exercício 16',
        wording: 'Texto do enunciado da questão',
        example: 'Quando enviado 10 retorna 10',
        defaultCode: 'function retornar(param) {}',
        test: 'describe("retornar", () => { it("Retorna 5 quando passado 5", () => { const r = retornar(5); expect(r).equal(5); }); it("Retorna 3 quando passado 3", () => { const r = retornar(3); expect(r).equal(3); }); })',
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        topicId: 9,
        name: 'Exercício 17',
        wording: 'Texto do enunciado da questão',
        example: 'Quando enviado 10 e 5 retorna 15',
        defaultCode: 'function soma(param1, param2) {}',
        test: 'describe("soma", () => { it("Retorna 9 quando passado 5 e 4", () => { const r = soma(5, 4); expect(r).equal(9); }); it("Retorna 3 quando passado 1 e 2", () => { const r = soma(1, 2); expect(r).equal(3); }); });',
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        topicId: 9,
        name: 'Exercício 18',
        wording: 'Texto do enunciado da questão',
        example: 'Quando enviado 10 e 5 retorna 5',
        defaultCode: 'function subtrair(param1, param2) {}',
        test: 'describe("subtrair", () => { it("Retorna 1 quando passado 5 e 4", () => { const r = subtrair(5, 4); expect(r).equal(1); }); it("Retorna 3 quando passado 6 e 3", () => { const r = subtrair(6, 3); expect(r).equal(3); }); });',
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        topicId: 10,
        name: 'Exercício 19',
        wording: 'Texto do enunciado da questão',
        example: 'Quando enviado 10 retorna 10',
        defaultCode: 'function retornar(param) {}',
        test: 'describe("retornar", () => { it("Retorna 5 quando passado 5", () => { const r = retornar(5); expect(r).equal(5); }); it("Retorna 3 quando passado 3", () => { const r = retornar(3); expect(r).equal(3); }); })',
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        topicId: 10,
        name: 'Exercício 20',
        wording: 'Texto do enunciado da questão',
        example: 'Quando enviado 10 e 5 retorna 15',
        defaultCode: 'function soma(param1, param2) {}',
        test: 'describe("soma", () => { it("Retorna 9 quando passado 5 e 4", () => { const r = soma(5, 4); expect(r).equal(9); }); it("Retorna 3 quando passado 1 e 2", () => { const r = soma(1, 2); expect(r).equal(3); }); });',
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        topicId: 11,
        name: 'Exercício 21',
        wording: 'Texto do enunciado da questão',
        example: 'Quando enviado 10 e 5 retorna 5',
        defaultCode: 'function subtrair(param1, param2) {}',
        test: 'describe("subtrair", () => { it("Retorna 1 quando passado 5 e 4", () => { const r = subtrair(5, 4); expect(r).equal(1); }); it("Retorna 3 quando passado 6 e 3", () => { const r = subtrair(6, 3); expect(r).equal(3); }); });',
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        topicId: 11,
        name: 'Exercício 22',
        wording: 'Texto do enunciado da questão',
        example: 'Quando enviado 10 retorna 10',
        defaultCode: 'function retornar(param) {}',
        test: 'describe("retornar", () => { it("Retorna 5 quando passado 5", () => { const r = retornar(5); expect(r).equal(5); }); it("Retorna 3 quando passado 3", () => { const r = retornar(3); expect(r).equal(3); }); })',
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        topicId: 12,
        name: 'Exercício 23',
        wording: 'Texto do enunciado da questão',
        example: 'Quando enviado 10 e 5 retorna 15',
        defaultCode: 'function soma(param1, param2) {}',
        test: 'describe("soma", () => { it("Retorna 9 quando passado 5 e 4", () => { const r = soma(5, 4); expect(r).equal(9); }); it("Retorna 3 quando passado 1 e 2", () => { const r = soma(1, 2); expect(r).equal(3); }); });',
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        topicId: 12,
        name: 'Exercício 24',
        wording: 'Texto do enunciado da questão',
        example: 'Quando enviado 10 e 5 retorna 5',
        defaultCode: 'function subtrair(param1, param2) {}',
        test: 'describe("subtrair", () => { it("Retorna 1 quando passado 5 e 4", () => { const r = subtrair(5, 4); expect(r).equal(1); }); it("Retorna 3 quando passado 6 e 3", () => { const r = subtrair(6, 3); expect(r).equal(3); }); });',
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        topicId: 13,
        name: 'Exercício 25',
        wording: 'Texto do enunciado da questão',
        example: 'Quando enviado 10 retorna 10',
        defaultCode: 'function retornar(param) {}',
        test: 'describe("retornar", () => { it("Retorna 5 quando passado 5", () => { const r = retornar(5); expect(r).equal(5); }); it("Retorna 3 quando passado 3", () => { const r = retornar(3); expect(r).equal(3); }); })',
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        topicId: 13,
        name: 'Exercício 26',
        wording: 'Texto do enunciado da questão',
        example: 'Quando enviado 10 e 5 retorna 15',
        defaultCode: 'function soma(param1, param2) {}',
        test: 'describe("soma", () => { it("Retorna 9 quando passado 5 e 4", () => { const r = soma(5, 4); expect(r).equal(9); }); it("Retorna 3 quando passado 1 e 2", () => { const r = soma(1, 2); expect(r).equal(3); }); });',
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        topicId: 14,
        name: 'Exercício 27',
        wording: 'Texto do enunciado da questão',
        example: 'Quando enviado 10 e 5 retorna 5',
        defaultCode: 'function subtrair(param1, param2) {}',
        test: 'describe("subtrair", () => { it("Retorna 1 quando passado 5 e 4", () => { const r = subtrair(5, 4); expect(r).equal(1); }); it("Retorna 3 quando passado 6 e 3", () => { const r = subtrair(6, 3); expect(r).equal(3); }); });',
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        topicId: 14,
        name: 'Exercício 28',
        wording: 'Texto do enunciado da questão',
        example: 'Quando enviado 10 retorna 10',
        defaultCode: 'function retornar(param) {}',
        test: 'describe("retornar", () => { it("Retorna 5 quando passado 5", () => { const r = retornar(5); expect(r).equal(5); }); it("Retorna 3 quando passado 3", () => { const r = retornar(3); expect(r).equal(3); }); })',
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        topicId: 15,
        name: 'Exercício 29',
        wording: 'Texto do enunciado da questão',
        example: 'Quando enviado 10 e 5 retorna 15',
        defaultCode: 'function soma(param1, param2) {}',
        test: 'describe("soma", () => { it("Retorna 9 quando passado 5 e 4", () => { const r = soma(5, 4); expect(r).equal(9); }); it("Retorna 3 quando passado 1 e 2", () => { const r = soma(1, 2); expect(r).equal(3); }); });',
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        topicId: 15,
        name: 'Exercício 30',
        wording: 'Texto do enunciado da questão',
        example: 'Quando enviado 10 e 5 retorna 5',
        defaultCode: 'function subtrair(param1, param2) {}',
        test: 'describe("subtrair", () => { it("Retorna 1 quando passado 5 e 4", () => { const r = subtrair(5, 4); expect(r).equal(1); }); it("Retorna 3 quando passado 6 e 3", () => { const r = subtrair(6, 3); expect(r).equal(3); }); });',
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        topicId: 16,
        name: 'Exercício 31',
        wording: 'Texto do enunciado da questão',
        example: 'Quando enviado 10 retorna 10',
        defaultCode: 'function retornar(param) {}',
        test: 'describe("retornar", () => { it("Retorna 5 quando passado 5", () => { const r = retornar(5); expect(r).equal(5); }); it("Retorna 3 quando passado 3", () => { const r = retornar(3); expect(r).equal(3); }); })',
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        topicId: 16,
        name: 'Exercício 32',
        wording: 'Texto do enunciado da questão',
        example: 'Quando enviado 10 e 5 retorna 15',
        defaultCode: 'function soma(param1, param2) {}',
        test: 'describe("soma", () => { it("Retorna 9 quando passado 5 e 4", () => { const r = soma(5, 4); expect(r).equal(9); }); it("Retorna 3 quando passado 1 e 2", () => { const r = soma(1, 2); expect(r).equal(3); }); });',
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        topicId: 17,
        name: 'Exercício 33',
        wording: 'Texto do enunciado da questão',
        example: 'Quando enviado 10 e 5 retorna 5',
        defaultCode: 'function subtrair(param1, param2) {}',
        test: 'describe("subtrair", () => { it("Retorna 1 quando passado 5 e 4", () => { const r = subtrair(5, 4); expect(r).equal(1); }); it("Retorna 3 quando passado 6 e 3", () => { const r = subtrair(6, 3); expect(r).equal(3); }); });',
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        topicId: 17,
        name: 'Exercício 34',
        wording: 'Texto do enunciado da questão',
        example: 'Quando enviado 10 retorna 10',
        defaultCode: 'function retornar(param) {}',
        test: 'describe("retornar", () => { it("Retorna 5 quando passado 5", () => { const r = retornar(5); expect(r).equal(5); }); it("Retorna 3 quando passado 3", () => { const r = retornar(3); expect(r).equal(3); }); })',
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        topicId: 18,
        name: 'Exercício 35',
        wording: 'Texto do enunciado da questão',
        example: 'Quando enviado 10 e 5 retorna 15',
        defaultCode: 'function soma(param1, param2) {}',
        test: 'describe("soma", () => { it("Retorna 9 quando passado 5 e 4", () => { const r = soma(5, 4); expect(r).equal(9); }); it("Retorna 3 quando passado 1 e 2", () => { const r = soma(1, 2); expect(r).equal(3); }); });',
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        topicId: 18,
        name: 'Exercício 36',
        wording: 'Texto do enunciado da questão',
        example: 'Quando enviado 10 e 5 retorna 5',
        defaultCode: 'function subtrair(param1, param2) {}',
        test: 'describe("subtrair", () => { it("Retorna 1 quando passado 5 e 4", () => { const r = subtrair(5, 4); expect(r).equal(1); }); it("Retorna 3 quando passado 6 e 3", () => { const r = subtrair(6, 3); expect(r).equal(3); }); });',
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        topicId: 19,
        name: 'Exercício 37',
        wording: 'Texto do enunciado da questão',
        example: 'Quando enviado 10 retorna 10',
        defaultCode: 'function retornar(param) {}',
        test: 'describe("retornar", () => { it("Retorna 5 quando passado 5", () => { const r = retornar(5); expect(r).equal(5); }); it("Retorna 3 quando passado 3", () => { const r = retornar(3); expect(r).equal(3); }); })',
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        topicId: 19,
        name: 'Exercício 38',
        wording: 'Texto do enunciado da questão',
        example: 'Quando enviado 10 e 5 retorna 15',
        defaultCode: 'function soma(param1, param2) {}',
        test: 'describe("soma", () => { it("Retorna 9 quando passado 5 e 4", () => { const r = soma(5, 4); expect(r).equal(9); }); it("Retorna 3 quando passado 1 e 2", () => { const r = soma(1, 2); expect(r).equal(3); }); });',
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        topicId: 20,
        name: 'Exercício 39',
        wording: 'Texto do enunciado da questão',
        example: 'Quando enviado 10 e 5 retorna 5',
        defaultCode: 'function subtrair(param1, param2) {}',
        test: 'describe("subtrair", () => { it("Retorna 1 quando passado 5 e 4", () => { const r = subtrair(5, 4); expect(r).equal(1); }); it("Retorna 3 quando passado 6 e 3", () => { const r = subtrair(6, 3); expect(r).equal(3); }); });',
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        topicId: 20,
        name: 'Exercício 40',
        wording: 'Texto do enunciado da questão',
        example: 'Quando enviado 10 retorna 10',
        defaultCode: 'function retornar(param) {}',
        test: 'describe("retornar", () => { it("Retorna 5 quando passado 5", () => { const r = retornar(5); expect(r).equal(5); }); it("Retorna 3 quando passado 3", () => { const r = retornar(3); expect(r).equal(3); }); })',
        createdAt: new Date(),
        updatedAt: new Date(),
      },
    ]);
  },

  down: async (queryInterface) => queryInterface.bulkDelete('exercises', null, {}),
};
